server:
  port: 8761

spring:
  application:
    name: eureka-service

  # rabbitMQ config for Spring Cloud Bus to be able to communicate
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    # password: guest
    password: '{cipher}AQC9lpXh3COldXHmKD2LEkHjtRpylXnMu9j9ikee+72wUg/Qj70CdZyRgThT7+DQF30JuPzw5UdVYayDYD4Hsw0iXYoDKIYpEJy31mbUuHPXVkuXS73PgCQZ6SvKN1HpXLE86S1Buvmp0TE5abbiebckJrXTNSDgYV7gvVxp1mjX47egwdWVZpe5DmifiLrnBOMVJffuczhGYFpeykEPPTPzLGqA7hJXdB+SR96RdBYS9V9HW/IIAjhE+bbu8h2mW0m72Gz0fDH7D8ppzk3PkGJZMoGN9zPlJiK1Z/m6IPP4Q1E1SnawVDIOkD1qZMV/+9e951Dz7YhUa61gUVF+een1QnZy3/TeplaLvmTIYy78lfs/HzpS0DMHtQuJK/jhM18='

#Eureka by default runs with cluster (eureka not gonna register thinking its in a cluster of eureka servers ,eureka will not fetch registry from other Eureka servers) - locally we dont need it
eureka:
  client:
    register-with-eureka: false
    fetch-registry: false
    
    service-url:
      defaultZone: http://localhost:8761/eureka
# set instance id (allows parallel run few instances without duplicating names)
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# in some cases preferable to advertise IP address instead of host name (avoid issues with hostname)
  # instance:
    # prefer-ip-address: true
# we can configure hostname explicitly
    # hostname: localhost